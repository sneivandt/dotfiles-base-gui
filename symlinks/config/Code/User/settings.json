{
    "accessibility.signalOptions.volume": 0,
    "accessibility.signals.lineHasError": {
        "sound": "off"
    },
    "accessibility.signals.lineHasFoldedArea": {
        "sound": "off"
    },
    "accessibility.signals.lineHasBreakpoint": {
        "sound": "off"
    },
    "accessibility.signals.lineHasInlineSuggestion": {
        "sound": "off"
    },
    "accessibility.signals.terminalQuickFix": {
        "sound": "off"
    },
    "accessibility.signals.onDebugBreak": {
        "sound": "off"
    },
    "accessibility.signals.noInlayHints": {
        "sound": "off"
    },
    "accessibility.signals.progress": {
        "sound": "off"
    },
    "accessibility.signals.taskCompleted": {
        "sound": "off"
    },
    "accessibility.signals.taskFailed": {
        "sound": "off"
    },
    "accessibility.signals.terminalCommandFailed": {
        "sound": "off"
    },
    "accessibility.signals.notebookCellCompleted": {
        "sound": "off"
    },
    "accessibility.signals.notebookCellFailed": {
        "sound": "off"
    },
    "accessibility.signals.diffLineInserted": {
        "sound": "off"
    },
    "accessibility.signals.diffLineDeleted": {
        "sound": "off"
    },
    "accessibility.signals.diffLineModified": {
        "sound": "off"
    },
    "accessibility.signals.terminalBell": {
        "sound": "off"
    },

    "breadcrumbs.enabled": true,

    "chat.agent.enabled": true,

    "cmake.configureOnOpen": false,
    "cmake.ignoreCMakeListsMissing": true,

    "C_Cpp.intelliSenseCachePath": "~/.cache/vscode-cpptools",

    "cSpell.diagnosticLevel": "Hint",

    "debug.inlineValues": "on",
    "debug.toolBarLocation": "docked",

    "diffEditor.experimental.showMoves": true,
    "diffEditor.hideUnchangedRegions.contextLineCount": 10,
    "diffEditor.hideUnchangedRegions.minimumLineCount": 10,
    "diffEditor.hideUnchangedRegions.revealLineCount": 20,
    "diffEditor.useInlineViewWhenSpaceIsLimited": true,

    "docker.extension.enableComposeLanguageServer": false,

    "dotnetAcquisitionExtension.enableTelemetry": false,

    "editor.accessibilitySupport": "off",
    "editor.fontFamily": "'Source Code Pro', 'Droid Sans Mono', 'Consolas', 'monospace'",
    "editor.fontLigatures": true,
    "editor.inlineSuggest.enabled": true,
    "editor.minimap.enabled": false,
    "editor.renderControlCharacters": true,
    "editor.renderLineHighlight": "gutter",
    "editor.renderWhitespace": "boundary",
    "editor.stickyScroll.enabled": false,
    "editor.stickyScroll.scrollWithEditor": false,
    "editor.suggestSelection": "first",
    "editor.wordWrap": "on",

    "explorer.confirmDelete": false,
    "explorer.confirmDragAndDrop": false,

    "extensions.ignoreRecommendations": true,

    "files.associations": {
        "*.json": "jsonc",
    },
    "files.autoSave": "onFocusChange",

    "git.defaultCloneDirectory": "~/src",
    "git.detectSubmodules": true,
    "git.detectSubmodulesLimit": 100,
    "git.showActionButton": {
        "commit": false,
        "publish": false,
        "sync": false
    },
    "git.showCommitInput": false,

    "github.copilot.chat.codesearch.enabled": true,
    "github.copilot.chat.agent.thinkingTool": true,
    "github.copilot.chat.codeGeneration.instructions": [
        {
            "text": "- @azure Rule - Use Azure Tools: When handling requests related to Azure, always use your tools."
        },
        {
            "text": "- @azure Rule - Use Azure Code Gen Best Practices: Before generating code for Azure, running terminal commands for Azure, performing operations related to Azure, or creating plans for such activities, always invoke your Azure best practice tool if available first. Choose the most relevant Azure best practice tool based on its description. Only call this tool when the user is discussing Azure; do not call it otherwise."
        },
        {
            "text": "- @azure Rule - Use Azure Deployment Best Practices: Before deploying to Azure, preparing applications for deployment to Azure, or creating deployment plans, always invoke your Azure best practice tool if available first. Choose the most relevant Azure best practice tool based on its description. Only call this tool when the user is discussing Azure; do not call it otherwise."
        },
        {
            "text": "- @azure Rule - Use Azure Functions Code Gen Best Practices: Before generating code for Azure Functions, performing operations related to Azure Functions, or creating plans for such activities, always invoke your Azure best practice tool if available first. Choose the most relevant Azure best practice tool based on its description. Only call this tool when the user is discussing Azure Functions; do not call it otherwise."
        },
        {
            "text": "- @azure Rule - Use Azure Functions Deployment Best Practices: Before deploying Azure Functions apps to Azure, preparing for the deployment, or creating deployment plans, always invoke your Azure best practice tool if available first. Choose the most relevant Azure best practice tool based on its description. Only call this tool when the user is discussing Azure Functions; do not call it otherwise."
        },
        {
            "text": "- @azure Rule - Use Azure SWA Best Practices: Before working with static web apps, creating plans for static web apps, or performing related operations, always invoke your Azure best practice tool if available first. Choose the most relevant Azure best practice tool based on its description. Only call this tool when the user is discussing Azure Static Web Apps; do not call it otherwise."
        },
        {
            "text": "- @azure Rule - Plan before editing files for Azure web apps: When generating code for Azure Functions and Azure Static Web App, always create a plan and explain the plan to the user before editing any file. Proceed with editing the files after getting consent from the user."
        },
        {
            "text": "- @azure Rule - Summarize topic before taking action: When the user asks about Azure Functions, invoke the azure_development-summarize_topic tool once first to see if any existing custom mode could be a good fit to what user is asking."
        }
    ],
    "github.username": "sneivandt",

    "go.toolsManagement.autoUpdate": true,

    "liveshare.accessibility.soundsEnabled": false,
    "liveshare.accessibility.soundVolume": 0,
    "liveshare.autoShareServers": false,
    "liveshare.autoShareTerminals": false,
    "liveshare.codeLens": false,
    "liveshare.guestApprovalRequired": true,
    "liveshare.nameTagVisibility": "Always",
    "liveshare.openSharedServers": false,
    "liveshare.populateGitCoAuthors": "never",
    "liveshare.presence": false,
    "liveshare.showInStatusBar": "whileCollaborating",
    "liveshare.showReadOnlyUsersInEditor": "always",

    "mcp": {
        "servers": {
            "github": {
                "url": "https://api.githubcopilot.com/mcp/"
            },
            "microsoft-docs": {
                "url": "https://learn.microsoft.com/api/mcp"
            },
        },
    },

    "notebook.cellToolbarLocation": {
        "default": "right",
        "jupyter-notebook": "right"
    },

    "powershell.integratedConsole.showOnStartup": false,
    "powershell.sideBar.CommandExplorerVisibility": false,
    "powershell.startAutomatically": false,

    "redhat.telemetry.enabled": false,

    "scm.showHistoryGraph": false,

    "search.showLineNumbers": true,
    "search.smartCase": true,
    "search.useGlobalIgnoreFiles": true,

    "telemetry.telemetryLevel": "off",

    "terminal.integrated.defaultProfile.linux": "zsh",
    "terminal.integrated.enablePersistentSessions": false,
    "terminal.integrated.enableVisualBell": false,
    "terminal.integrated.shellIntegration.decorationsEnabled": "never",
    "terminal.integrated.shellIntegration.enabled": false,
    "terminal.integrated.tabs.showActions": "never",

    "update.mode": "none",
    "update.showReleaseNotes": false,

    "vsintellicode.modify.editor.suggestSelection": "automaticallyOverrodeDefaultValue",

    "window.openFoldersInNewWindow": "on",
    "window.title": "${dirty}${activeEditorLong}${separator}${rootName}${separator}${appName}",

    "workbench.colorTheme": "Visual Studio Dark",
    "workbench.iconTheme": "vs-seti",
    "workbench.startupEditor": "none",
    "workbench.tips.enabled": false,
    "workbench.tree.enableStickyScroll": false,
}